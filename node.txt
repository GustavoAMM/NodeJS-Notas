====>Node<===

¿Qué es?

Es un entorno de ejecución de js
esta construido con V8 (motor de google)

cada parte de un proyecto en node se le conoce como modulos y cada uno tiene una tarea 

===== Modulos (exportado individualmente) ====

LOs modulos nos permiten divir nuestra aplicación en diversas partes

=> Para exportar algo de un documento, ejemplo: funciones de una calculadora basica, necesitamos exportar las funciones para poder ser utilizado en otro documento atraves de un objetos

Ejemplo: 
(se utuliza la palabra "exports" el nombre que le damos y que funcion va a utilizar)

function add(x1,x2){
    return x1 + x2
  }

  exports.add = add;

=> Para importa aldo de un documento externo y porder utilizar el objeto se guarda en una constante:

Ejemplo:
(se utiliza la palabra "require" seguido de la ruta(node necesita toda la ruta, desde donde esta instalado hasta la ubicación del archivo))

    const math=require("./logica");
    math.add(1,2);


=== Modulos (exportar en un objeto) ===

Ejemplo:

//creamos una constante para guardar el objeto vacio
const Math = {}

//creamos una funcion o lo que queremos exportar 
function add(x1,x2){
    return x1 + x2
  }

//le añadimos atributos al objeto 
Math.add = add;

//exportamos el objeto en este caso
module.exports = Math;

y para importar se hace de la misma manera que individualmente

===================resumen===================
el primer ejepmlo exportamos una propiedad de un objeto
el segun ejemplo exportamos un objeto, pero tambien podemos exportar una función, variables, etc,(cualquier dato de JS)
=============================================

=== Modulos pre-construidos ====

son modulos que cuando instalamos node, estos se instalan a su par, es decir, bienen incluidos por defualt 

=>Para importar un modulo pre-construidos es casi igual que lo haciamos antes, a diferencia que no necesita toda la ruta(con el .)solo se escibre el nombre del modulo y ya.

Se pueden ver todos los modulos pre-construidos desde la documentación oficial de node

link => https://nodejs.org/dist/latest-v16.x/docs/api/

Ejemplo:
  const os = require('node:os');

Es comun y muy recomendable poner el nombre del modulo al nombre de la constante 
Para las funcionalidades de estos modulo es necesario checar la documentación ya que no esta escrito por nosotros

ejemplos:
  const os = require("node:os");
  console.log(os.platform());

  const os = require("node:os");
  console.log("memoria libre: " + os.freemem() + " bytes");

=======================resumen=======================
NOTA = son modulos core, son modulos que nos permiten trabajar a muy bajo nivel
un callback es una función que se ejecuta automaticamante despues de hacer algo
=====================================================

=== programación asincrona usando un modulo pre-construidos ===

un callback es una función que se ejecuta automaticamante despues de hacer algo
funcion asincrona ejemplo:

const fs = require("node:fs");

fs.readFile("./texto.txt", function (err, data) {
  if (err) {
    console.log(err);
  }
  if (data) {
    console.log(data.toString());
  }
});

=>CODIGO BLOQUEANTE

La manera en la que hubieramos hecho esto nosotros:
const resultado = write("","")
=> sin embargo esto se conoce como codigo bloqueante, ya que tenemos que esperar a que termine este codigo, para que se puede ejecutar el codigo abajo o el siguiente y esto no pasa en nodejs

Se usan funciones asincronas cuando en el codigo se hacen tareas que node no hace,
ejemplo: para insertar datos en una base de datos, nodejs no hace eso, por ende, se usa la programación asincrona y continua con el codigo y cuando termina la bd nodejs lo detecta y hace lo que le indiquemos 

=== Servidores NodeJS === 

const http = require("http");
const handelServer = function (req, res) {
  res.writeHead(200, { "content-type": "text/plain" });
  res.write("Hola NOdeJS");
  res.end();
};

const server = http.createServer(handelServer);

server.listen(3000, function () {
  console.log("Servidor on port 3000");
});

usando un modulo pre-construidos (http) podemos crear un server
siempre es bueno tener todo por separado, en este caso en constantes, ejemplo: el metodo http, el servidor, y el puerto.

=== framework === 

nmp = node package manager

es un administrador de paquetes en node,  permite administrar paquetes o modulo de node

LInk => https://www.npmjs.com/ (para buscar modulos)

ejemplo de instalación de un modulo de colores:

npm install colors

//codigo
const colors = require("colors");

server.listen(3000, function () {
  console.log("Servidor on port 3000".red);
});

NOTA= Sí queremos subir nuestro proyecto a un servidor este servidor necesita la lista de los modulos que hemos instaldo para eso nos ayuda un comando llamado init

//comando

npm init 

nos preguntará varias cosas que nosotros necesitamos llenar o dejar en blanco y este cuando finalice creara un documento llamado package.json, este es un archivo de configuración, da información del proyecto.

dentro de él hay una propiedad llamado "dependencies" con las dependencias que necesita el proyecto para que funcione

por ende cuando lo duba a un servidor el servidor correrra el comando "npm install" y descargara todas las dependencias que necesite el poryecto para ser desplegado correrctamente

otro apartado importante en el package json es el atributo de scrips ya que en este podemos colocar cualquier instruccion que nosotros quieramos, por ejemplo que inicie el servidor nuestro proyecto

"scripts": {
    "start" : "node index.js"
  }
y para correr el comando es: npm start 
NOTA => solo node conoce el comadno start
si quieremos añadir un comando personalizado necesitamos hacerlo difercente por ejemplo 

  "scripts": {
    "start" : "node index.js",
    "desarrollo":"node index.js"
  },
  para este necesitamos correrlo con: npm run dev

=============Resumen=============
EL package.json tiene toda la informacion del proyecto
para poder ser desplegado
=================================



