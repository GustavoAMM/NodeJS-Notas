===Notas del curso de nodeJS===

domingo 16 de octubre de 2022
requisitos previos: HTML, CSS, JS

=== ¿Qué es? ===

ES un entorno de ejecución de js (Javascript runtime enviorement)

Programa que nos permite utilizar js para uso de aplicaciones de escritorio, servidor, consola haciendo js de uso generar y no solo en el navegador.

utilizando v8 fue creado para soportar muchos usuarios sin la necesidad de muchos recursos.

Es posible crear aplicaciones fullstack

=== comandos básicos ===

=>Repel: interprete de node, nos permite ejecutar js de manera interactiva.(es equivalente a la consola del navegador)

node --version -> ver versión de node
.help -> muestra ayuda para ver los demas comandos
.exit -> salir de node
ctrl + d -> terminar node
ctrl + c -> matar el proceso

nodeJS  puede interpretar codigo sin la necesidad de entrar en su terminal 

ejemplo:
  node -e "console.log(10 + 10)"

para guardar comando de replel con : .sabe nombre_del_archivo
para cargar archivos guardados con : .load nombre_del_archivo

=== Js ===

se puede utilizar js vanilla  
ejemplo:

  let username = "angel";
  let age = 20;
  let hobbies = true;
  let points = [10, 20, 30];
  let user = {
    name: "angel",
    last: "montoya",
  };
  const pi = 3.1416;

ejemplo: 
const age = 40;

  if (age > 30) {
    console.log("Es mayor a 30");
  } else {
   console.log("Es menor a 30");
  }

=== node vs navegador === 

como sabemos dentro del navegador podemos acceder con js a muchas funcionalidades de la web
por ejemplo: document.tittle, el window.innerHeight, el document.body.innerHTML, etc
en node tenemos acceso a diferentes objetos del sistema operativo ya que en este se esta executando node
por ejemplo: os.userInfo(), os.arch(), os.homedir()

=== objetos globales ===

a diferencia del navegaro en node tenemos objetos globales
por ejemplo:

console.log(__dirname); => da la dirección completa actual del directorio
console.log(__filename); => da la dirección completa actual del documento

console.log(module); => da información como el id, path, filename, 
console.log(require); => da información varia
console.log(process); => da información acerca de los procesos por ejemplo: version de node, del v8, del uv, etc.

=== timers ===

algunos los trae por defecto y sirve para tener un poco de control sobre el timepo de ejecición de un comando 

Ejemplo:

    setInterval(() => {
      console.log("hola mundo");
    }, 2000);

esta es setInterval y cada dos segundos va a ejecutar una función flecha, en este caso es un console.log

Ejemplo 2: 

    setTimeout(() => {
      console.log("Hola mundo");
    }, 5000);

este es setTimeout y tiene que esperar algo para que pueda ejecutarse, en este caso tiene que esperar 5s para poder ejecutar el console.log
